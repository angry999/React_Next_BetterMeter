{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\WORK\\\\2020_11\\\\BetterMeter-Test-React-Next\\\\components\\\\HelpTooltip\\\\index.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useCallback } from 'react';\nimport styles from './styles.module.scss';\nimport { usePopper } from 'react-popper';\n\nconst HelpTooltip = ({\n  title,\n  description\n}) => {\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const {\n    0: referenceElement,\n    1: setReferenceElement\n  } = useState(null);\n  const {\n    0: popperElement,\n    1: setPopperElement\n  } = useState(null);\n  const {\n    0: arrowElement,\n    1: setArrowElement\n  } = useState(null);\n  const {\n    styles: popperStyles,\n    attributes\n  } = usePopper(referenceElement, popperElement, {\n    placement: 'top',\n    modifiers: [{\n      name: 'flip',\n      options: {\n        fallbackPlacements: ['top']\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 10]\n      }\n    }, {\n      name: 'arrow',\n      // padding should be equal to border-radius of the dropdown\n      options: {\n        element: arrowElement,\n        padding: 7\n      }\n    }, {\n      name: 'preventOverflow',\n      options: {\n        // padding from browser edges\n        padding: 16\n      }\n    }]\n  });\n  const close = useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n  const open = useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseEnter: open,\n      onMouseLeave: close,\n      role: \"button\",\n      tabIndex: 0,\n      className: styles.handle,\n      ref: setReferenceElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n      className: styles.popover,\n      ref: setPopperElement,\n      style: popperStyles.popper\n    }, attributes.popper), {}, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.content,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.contentTitle,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.contentDescription,\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: setArrowElement,\n        style: popperStyles.arrow,\n        className: styles.popoverArrow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\nexport default HelpTooltip;","map":{"version":3,"sources":["E:/WORK/2020_11/BetterMeter-Test-React-Next/components/HelpTooltip/index.jsx"],"names":["useState","useCallback","styles","usePopper","HelpTooltip","title","description","isOpen","setIsOpen","referenceElement","setReferenceElement","popperElement","setPopperElement","arrowElement","setArrowElement","popperStyles","attributes","placement","modifiers","name","options","fallbackPlacements","offset","element","padding","close","open","handle","popover","popper","content","contentTitle","contentDescription","arrow","popoverArrow"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react'\r\nimport styles from './styles.module.scss'\r\nimport { usePopper } from 'react-popper'\r\n\r\nconst HelpTooltip = ({ title, description }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [referenceElement, setReferenceElement] = useState(null)\r\n  const [popperElement, setPopperElement] = useState(null)\r\n  const [arrowElement, setArrowElement] = useState(null)\r\n  const { styles: popperStyles, attributes } = usePopper(\r\n    referenceElement,\r\n    popperElement,\r\n    {\r\n      placement: 'top',\r\n      modifiers: [\r\n        {\r\n          name: 'flip',\r\n          options: {\r\n            fallbackPlacements: ['top'],\r\n          },\r\n        },\r\n        {\r\n          name: 'offset',\r\n          options: {\r\n            offset: [0, 10],\r\n          },\r\n        },\r\n        {\r\n          name: 'arrow',\r\n          // padding should be equal to border-radius of the dropdown\r\n          options: { element: arrowElement, padding: 7 },\r\n        },\r\n        {\r\n          name: 'preventOverflow',\r\n          options: {\r\n            // padding from browser edges\r\n            padding: 16,\r\n          },\r\n        },\r\n      ],\r\n    }\r\n  )\r\n\r\n  const close = useCallback(() => {\r\n    setIsOpen(false)\r\n  }, [setIsOpen])\r\n\r\n  const open = useCallback(() => {\r\n    setIsOpen(true)\r\n  }, [setIsOpen])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        onMouseEnter={open}\r\n        onMouseLeave={close}\r\n        role=\"button\"\r\n        tabIndex={0}\r\n        className={styles.handle}\r\n        ref={setReferenceElement}\r\n      />\r\n\r\n      {isOpen && (\r\n        <div\r\n          className={styles.popover}\r\n          ref={setPopperElement}\r\n          style={popperStyles.popper}\r\n          {...attributes.popper}\r\n        >\r\n          <div className={styles.content}>\r\n            <div className={styles.contentTitle}>{title}</div>\r\n            <div className={styles.contentDescription}>{description}</div>\r\n          </div>\r\n          <div\r\n            ref={setArrowElement}\r\n            style={popperStyles.arrow}\r\n            className={styles.popoverArrow}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HelpTooltip\r\n"]},"metadata":{},"sourceType":"module"}