{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\WORK\\\\2020_11\\\\BetterMeter-Test-React-Next\\\\components\\\\Select\\\\index.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useCallback, useMemo, useEffect } from 'react';\nimport _ from 'lodash';\nimport styles from './styles.module.scss';\nimport OutsideClickHandler from 'react-outside-click-handler';\nimport { usePopper } from 'react-popper';\nimport cn from 'classnames';\nimport { getTextWidth } from '../../utils';\nconst sameWidth = {\n  name: 'sameWidth',\n  enabled: true,\n  phase: 'beforeWrite',\n  requires: ['computeStyles'],\n  fn: ({\n    state\n  }) => {\n    state.styles.popper.width = `${state.rects.reference.width + 35}px`;\n  },\n  effect: ({\n    state\n  }) => {\n    state.elements.popper.style.width = `${state.elements.reference.offsetWidth + 35}px`;\n  }\n};\n\nconst DropdownMenu = ({\n  options,\n  value,\n  label,\n  onChange,\n  theme,\n  className,\n  full,\n  optionComponent: OptionComponent,\n  handleClassName\n}) => {\n  const {\n    0: valueWidth,\n    1: setValueWidth\n  } = useState();\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const {\n    0: referenceElement,\n    1: setReferenceElement\n  } = useState(null);\n  const {\n    0: popperElement,\n    1: setPopperElement\n  } = useState(null);\n  const {\n    styles: popperStyles,\n    attributes\n  } = usePopper(referenceElement, popperElement, {\n    placement: 'bottom-start',\n    modifiers: [{\n      name: 'flip',\n      options: {\n        fallbackPlacements: ['bottom-start']\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: [-20, -46]\n      }\n    }, {\n      name: 'preventOverflow',\n      options: {\n        // padding from browser edges\n        padding: 16\n      }\n    }, sameWidth]\n  });\n  const close = useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n  const toggle = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen, setIsOpen]);\n  const changeValue = useCallback(option => () => {\n    close();\n    onChange && onChange(option.value);\n  }, [close]);\n  const withColor = useMemo(() => _.some(options, option => option.color));\n  const valueLabel = useMemo(() => {\n    return _.get(_.find(options, {\n      value\n    }), 'label');\n  }, [options, value]);\n  useEffect(() => {\n    let width = 'auto';\n\n    if (full) {\n      const optionWidths = options.map(option => getTextWidth(option.label, \"500 16px 'DM Sans', Arial, Helvetica, sans-serif\"));\n      width = _.max(optionWidths);\n    }\n\n    setValueWidth(width);\n  }, [setValueWidth, options, full]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn(styles.select, {\n      [styles[theme]]: !!theme,\n      [styles.open]: isOpen,\n      [styles.full]: full\n    }, className),\n    children: /*#__PURE__*/_jsxDEV(OutsideClickHandler, {\n      onOutsideClick: close,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: toggle,\n        role: \"button\",\n        tabIndex: 0,\n        className: cn(styles.handle, handleClassName),\n        ref: setReferenceElement,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.label,\n          children: [label, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), !!valueLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.valueWrapper,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.value,\n            style: {\n              width: valueWidth\n            },\n            children: withColor ? '' : valueLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n        className: styles.popover,\n        ref: setPopperElement,\n        style: popperStyles.popper\n      }, attributes.popper), {}, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.list,\n          children: options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: changeValue(option),\n            role: \"button\",\n            tabIndex: 0,\n            className: cn(styles.option, {\n              [styles.selected]: option.value === value,\n              [styles.withColor]: withColor\n            }),\n            children: OptionComponent ? /*#__PURE__*/_jsxDEV(OptionComponent, {\n              option: option,\n              value: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 21\n            }, this) : option.label\n          }, option.label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DropdownMenu;","map":{"version":3,"sources":["E:/WORK/2020_11/BetterMeter-Test-React-Next/components/Select/index.jsx"],"names":["useState","useCallback","useMemo","useEffect","_","styles","OutsideClickHandler","usePopper","cn","getTextWidth","sameWidth","name","enabled","phase","requires","fn","state","popper","width","rects","reference","effect","elements","style","offsetWidth","DropdownMenu","options","value","label","onChange","theme","className","full","optionComponent","OptionComponent","handleClassName","valueWidth","setValueWidth","isOpen","setIsOpen","referenceElement","setReferenceElement","popperElement","setPopperElement","popperStyles","attributes","placement","modifiers","fallbackPlacements","offset","padding","close","toggle","changeValue","option","withColor","some","color","valueLabel","get","find","optionWidths","map","max","select","open","handle","valueWrapper","popover","list","selected"],"mappings":"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","sourcesContent":["import { useState, useCallback, useMemo, useEffect } from 'react'\r\nimport _ from 'lodash'\r\nimport styles from './styles.module.scss'\r\nimport OutsideClickHandler from 'react-outside-click-handler'\r\nimport { usePopper } from 'react-popper'\r\nimport cn from 'classnames'\r\nimport { getTextWidth } from '../../utils'\r\n\r\nconst sameWidth = {\r\n  name: 'sameWidth',\r\n  enabled: true,\r\n  phase: 'beforeWrite',\r\n  requires: ['computeStyles'],\r\n  fn: ({ state }) => {\r\n    state.styles.popper.width = `${state.rects.reference.width + 35}px`\r\n  },\r\n  effect: ({ state }) => {\r\n    state.elements.popper.style.width = `${state.elements.reference.offsetWidth + 35}px`\r\n  },\r\n}\r\n\r\nconst DropdownMenu = ({\r\n  options,\r\n  value,\r\n  label,\r\n  onChange,\r\n  theme,\r\n  className,\r\n  full,\r\n  optionComponent: OptionComponent,\r\n  handleClassName,\r\n}) => {\r\n  const [valueWidth, setValueWidth] = useState()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [referenceElement, setReferenceElement] = useState(null)\r\n  const [popperElement, setPopperElement] = useState(null)\r\n  const { styles: popperStyles, attributes } = usePopper(\r\n    referenceElement,\r\n    popperElement,\r\n    {\r\n      placement: 'bottom-start',\r\n      modifiers: [\r\n        {\r\n          name: 'flip',\r\n          options: {\r\n            fallbackPlacements: ['bottom-start'],\r\n          },\r\n        },\r\n        {\r\n          name: 'offset',\r\n          options: {\r\n            offset: [-20, -46],\r\n          },\r\n        },\r\n        {\r\n          name: 'preventOverflow',\r\n          options: {\r\n            // padding from browser edges\r\n            padding: 16,\r\n          },\r\n        },\r\n        sameWidth,\r\n      ],\r\n    }\r\n  )\r\n\r\n  const close = useCallback(() => {\r\n    setIsOpen(false)\r\n  }, [setIsOpen])\r\n\r\n  const toggle = useCallback(() => {\r\n    setIsOpen(!isOpen)\r\n  }, [isOpen, setIsOpen])\r\n\r\n  const changeValue = useCallback(\r\n    (option) => () => {\r\n      close()\r\n      onChange && onChange(option.value)\r\n    },\r\n    [close]\r\n  )\r\n\r\n  const withColor = useMemo(() => _.some(options, (option) => option.color))\r\n\r\n  const valueLabel = useMemo(() => {\r\n    return _.get(_.find(options, { value }), 'label')\r\n  }, [options, value])\r\n\r\n  useEffect(() => {\r\n    let width = 'auto'\r\n\r\n    if (full) {\r\n      const optionWidths = options.map((option) =>\r\n        getTextWidth(\r\n          option.label,\r\n          \"500 16px 'DM Sans', Arial, Helvetica, sans-serif\"\r\n        )\r\n      )\r\n\r\n      width = _.max(optionWidths)\r\n    }\r\n\r\n    setValueWidth(width)\r\n  }, [setValueWidth, options, full])\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        styles.select,\r\n        {\r\n          [styles[theme]]: !!theme,\r\n          [styles.open]: isOpen,\r\n          [styles.full]: full,\r\n        },\r\n        className\r\n      )}\r\n    >\r\n      <OutsideClickHandler onOutsideClick={close}>\r\n        <div\r\n          onClick={toggle}\r\n          role=\"button\"\r\n          tabIndex={0}\r\n          className={cn(styles.handle, handleClassName)}\r\n          ref={setReferenceElement}\r\n        >\r\n          <div className={styles.label}>{label}:</div>\r\n          {!!valueLabel && (\r\n            <div className={styles.valueWrapper}>\r\n              <div className={styles.value} style={{ width: valueWidth }}>\r\n                {withColor ? '' : valueLabel}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {isOpen && (\r\n          <div\r\n            className={styles.popover}\r\n            ref={setPopperElement}\r\n            style={popperStyles.popper}\r\n            {...attributes.popper}\r\n          >\r\n            <div className={styles.list}>\r\n              {options.map((option) => (\r\n                <div\r\n                  key={option.label}\r\n                  onClick={changeValue(option)}\r\n                  role=\"button\"\r\n                  tabIndex={0}\r\n                  className={cn(styles.option, {\r\n                    [styles.selected]: option.value === value,\r\n                    [styles.withColor]: withColor,\r\n                  })}\r\n                >\r\n                  {OptionComponent ? (\r\n                    <OptionComponent option={option} value={value} />\r\n                  ) : (\r\n                    option.label\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </OutsideClickHandler>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DropdownMenu\r\n"]},"metadata":{},"sourceType":"module"}